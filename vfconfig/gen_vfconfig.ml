module C = Configurator.V1

type platform = 
  | Windows 
  | MacOS 
  | Linux

let string_of_platform = function
  | Windows -> "Windows"
  | MacOS -> "MacOS"
  | Linux -> "Linux"

let platform_of_system_string = function
  | "linux" -> Linux 
  | "macosx" -> MacOS
  | "mingw" -> Windows
  | s -> failwith (Printf.sprintf "Invalid system: %s. Should be one of [ linux | macosx | mingw ]." s)

let vf_cfg_to_ml_string platform = Printf.sprintf {|(* generated by 'gen_vfconfig.ml', do not edit *)
let z3_present = false
let z3v4dot5_present = true
type platform =
  | %s
  | %s
  | %s
let platform = %s
|} (string_of_platform Linux) (string_of_platform MacOS) (string_of_platform Windows) (string_of_platform platform)

let () =
  C.main ~name:"gen_vfconfig" @@ fun c ->
  let plat = C.ocaml_config_var_exn c "system" |> platform_of_system_string in
  let oc = open_out_bin "vfconfig.ml" in
  vf_cfg_to_ml_string plat |> Printf.fprintf oc "%s"