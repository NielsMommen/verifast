module C = Configurator.V1

type platform = 
  | Windows 
  | MacOS 
  | Linux

let string_of_platform = function
  | Windows -> "Windows"
  | MacOS -> "MacOS"
  | Linux -> "Linux"

let platform_of_system_string = function
  | "linux" -> Linux 
  | "macosx" -> MacOS
  | "mingw" -> Windows
  | s -> failwith (Printf.sprintf "Invalid system: %s. Should be one of [ linux | macosx | mingw ]." s)

type vf_cfg = {
  z3_present: bool;
  z3v4dot5_present: bool;
  platform: platform;
}

let vf_cfg_to_ml_string cfg = Printf.sprintf {|(* generated by 'gen_vfconfig.ml', do not edit *)
let z3_present = %B
let z3v4dot5_present = %B
type platform =
  | %s
  | %s
  | %s
let platform = %s
|} cfg.z3_present cfg.z3v4dot5_present (string_of_platform Linux) (string_of_platform MacOS) (string_of_platform Windows) (string_of_platform cfg.platform)

let () =
  let no_z3 = ref false in
  let z3v4dot5 = ref true in
  C.main ~args:([
    ("-no_z3", Arg.Bool (fun b -> no_z3 := b), "[ true | false ]");
    ("-z3.4.5", Arg.Bool (fun b -> z3v4dot5 := b), "[ true | false ]")
  ]) ~name:"gen_vfconfig" (fun c ->
    let plat = C.ocaml_config_var_exn c "system" |> platform_of_system_string in
    let z3_present, z3v4dot5_present =
      match !no_z3, !z3v4dot5 with
      | true, _ -> false, false
      | false, true -> false, true
      | _ -> false, false
    in
    let oc = open_out_bin "vfconfig.ml" in
    let cfg = { z3_present; z3v4dot5_present; platform = plat; } in
    vf_cfg_to_ml_string cfg |> Printf.fprintf oc "%s"
  )